<?xml version="1.0" encoding="UTF-8"?><record_update table="scan_linter_check">
    <scan_linter_check action="INSERT_OR_UPDATE">
        <active>true</active>
        <category>code_sanity</category>
        <description>Checks if a script contains the string "[0]" (or any other constant number) which indicates the use of an anti-pattern where an element of an array is references by its absolute position instead by using an index variable (within a loop) or a an iterator pattern.</description>
        <documentation_url/>
        <finding_type/>
        <name>CodeSanity - Constant array index anti-pattern</name>
        <priority>1</priority>
        <resolution_details>Review the code carefully and see if really the first element of an array is of interest and should be references explicitly.&#13;
Why is it the first element? Has it been verified that the element really exists? How are subsequent elements of the array processed?&#13;
If you are sure that you need to reference an array element at a specific position, you may use the DevTools function GetValue() to safely retrieve array elements or object members. The GetValue() function is available both on the server and on the client. In case the requested value does not exist the function will gracefully return null instead of causing evaluator errors.</resolution_details>
        <run_condition/>
        <score_max>100</score_max>
        <score_min>0</score_min>
        <score_scale>1</score_scale>
        <script><![CDATA[(function (engine) {
	
    if (x_snc_codesanity.IsCheckApplicableToRecord())
	{	
		var GetStringValue = x_snc_devtools.GetStringValue;
		var strTable = GetStringValue(engine.current.getRecordClassName());
		var bException = false;
		if (strTable == 'sys_script_include')
		{
			var strName = GetStringValue(engine.current.name);
			var strApiName = GetStringValue(engine.current.api_name);

			if (strApiName == 'x_snc_devtools.CreateQRCodeRawData')
			{
				// CreateQRCodeRawData contains the open source QR Code generator library
				// The code violates the constant array index anti-pattern
				bException = true;
			}
		}
		if (bException == true)
		{
			return;
		}

		var GetStringValue = x_snc_devtools.GetStringValue;
		var StringCheckRegEx = x_snc_devtools.StringCheckRegEx;
		var ScriptEmptyStringLiterals = x_snc_devtools.ScriptEmptyStringLiterals;

		var strSource = GetStringValue(engine.rootNode.toSource());
		
		strSource = ScriptEmptyStringLiterals(strSource);

		if (StringCheckRegEx(strSource,'\\[\\s*[0-9]+\\s*\\]',''))
		{
			engine.finding.incrementWithNode(engine.rootNode);
		}
	}

})(engine);]]></script>
        <short_description>Do not use constant numbers as array indexes</short_description>
        <sys_class_name>scan_linter_check</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-03-10 10:42:06</sys_created_on>
        <sys_id>a0f22057db8a8510bcced03cd3961973</sys_id>
        <sys_mod_count>30</sys_mod_count>
        <sys_name>CodeSanity - Constant array index anti-pattern</sys_name>
        <sys_package display_value="CodeSanity WORK IN PROGRESS" source="x_snc_codesanity">8ed42c23dbad0510bcced03cd39619ce</sys_package>
        <sys_policy/>
        <sys_scope display_value="CodeSanity WORK IN PROGRESS">8ed42c23dbad0510bcced03cd39619ce</sys_scope>
        <sys_update_name>scan_linter_check_a0f22057db8a8510bcced03cd3961973</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-08-30 08:55:36</sys_updated_on>
    </scan_linter_check>
    <sys_translated_text action="delete_multiple" query="documentkey=a0f22057db8a8510bcced03cd3961973"/>
</record_update>
