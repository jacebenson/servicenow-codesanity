<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_atf_step">
    <sys_atf_step action="INSERT_OR_UPDATE">
        <active>true</active>
        <copied_from/>
        <description>Run Server Side Validation Script</description>
        <display_name>Run Server Side Script</display_name>
        <inputs/>
        <mugshots_cache_json/>
        <notes/>
        <order>1</order>
        <step_config display_value="Run Server Side Script">41de4a935332120028bc29cac2dc349a</step_config>
        <sys_class_name>sys_atf_step</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-08-05 13:46:52</sys_created_on>
        <sys_id>20a8d372db099d10dcbdd03cd396199c</sys_id>
        <sys_mod_count>11</sys_mod_count>
        <sys_name>Run Server Side Script</sys_name>
        <sys_package display_value="CodeSanity WORK IN PROGRESS" source="x_snc_codesanity">8ed42c23dbad0510bcced03cd39619ce</sys_package>
        <sys_policy/>
        <sys_scope display_value="CodeSanity WORK IN PROGRESS">8ed42c23dbad0510bcced03cd39619ce</sys_scope>
        <sys_update_name>sys_atf_step_20a8d372db099d10dcbdd03cd396199c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-10-13 06:58:47</sys_updated_on>
        <table/>
        <test display_value="CodeSanity - IsCheckApplicableToRecordByRules">e1981372db099d10dcbdd03cd396197d</test>
        <timeout/>
        <warning_message/>
    </sys_atf_step>
    <sys_variable_value action="delete_multiple" query="document_key=20a8d372db099d10dcbdd03cd396199c"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_atf_step</document>
        <document_key>20a8d372db099d10dcbdd03cd396199c</document_key>
        <order>100</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-08-05 13:46:52</sys_created_on>
        <sys_id>39a8d372db099d10dcbdd03cd39619b9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-08-05 13:46:52</sys_updated_on>
        <value>3.1</value>
        <variable display_value="Jasmine version">42f2564b73031300440211d8faf6a777</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_atf_step</document>
        <document_key>20a8d372db099d10dcbdd03cd396199c</document_key>
        <order>200</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-08-05 13:46:52</sys_created_on>
        <sys_id>fda8d372db099d10dcbdd03cd39619b9</sys_id>
        <sys_mod_count>11</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-10-13 06:58:47</sys_updated_on>
        <value>(function(outputs, steps, stepResult, assertEqual)&#13;
{&#13;
	var GetRecord = x_snc_devtools.GetRecord;&#13;
	&#13;
	var test = new x_snc_devtools.TestAPI(outputs, steps, stepResult, assertEqual);&#13;
	&#13;
	test.SetResult(true);&#13;
	&#13;
	function TestCase_IsCheckApplicableToRecordByRules(grCheck, grRecord, rules, vExpected)&#13;
	{&#13;
		test.TestCase(&#13;
			'Function IsCheckApplicableToRecordByRules()',&#13;
			IsCheckApplicableToRecordByRules,&#13;
			{&#13;
				'Check': grCheck,&#13;
				'Record': grRecord,&#13;
				'Rules': rules&#13;
			},&#13;
			vExpected,&#13;
			null,&#13;
			true);&#13;
	}&#13;
&#13;
&#13;
	TestCase_IsCheckApplicableToRecordByRules(null,null,null,false);&#13;
	&#13;
	// x_snc_codesanity.AppInstall&#13;
	var grRecordCodeSanityAppInstall = GetRecord('sys_script_include','206718d3db4a8510bcced03cd3961997'); &#13;
	&#13;
	// x_snc_devtools.AppInstall&#13;
	var grRecordDevToolsAppInstall = GetRecord('sys_script_include','339e63591b719050a89720a8ec4bcb3f'); 	&#13;
	&#13;
	// CodeSanity - Sys IDs in scripts&#13;
	var grCheckSysIdsInScript = GetRecord('scan_check','9dda4d97dbce8510bcced03cd3961921'); &#13;
	&#13;
	// CodeSanity - Throwing exceptions&#13;
	var grCheckThrowingExceptions = GetRecord('scan_check','6bd82ff8db12cd10b652edb305961910'); &#13;
	&#13;
	// No rules, no exceptions&#13;
	var rules = {};&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckSysIdsInScript,    grRecordCodeSanityAppInstall,rules, true);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckThrowingExceptions,grRecordCodeSanityAppInstall,rules, true);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckSysIdsInScript,    grRecordDevToolsAppInstall,  rules, true);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckThrowingExceptions,grRecordDevToolsAppInstall,  rules, true);&#13;
&#13;
	&#13;
	// An incomplete rule has no impact&#13;
	var rules = {&#13;
		blacklist: [&#13;
			{&#13;
				checks: ['CodeSanity - Sys IDs in scripts']&#13;
			}&#13;
		]&#13;
	};&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckSysIdsInScript,    grRecordCodeSanityAppInstall,rules, true);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckThrowingExceptions,grRecordCodeSanityAppInstall,rules, true);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckSysIdsInScript,    grRecordDevToolsAppInstall,  rules, true);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckThrowingExceptions,grRecordDevToolsAppInstall,  rules, true);&#13;
	&#13;
	&#13;
	// A single check should not be executed at all&#13;
	var rules = {&#13;
		blacklist: [&#13;
			{&#13;
				all: true,&#13;
				checks: ['CodeSanity - Sys IDs in scripts']&#13;
			}&#13;
		]&#13;
	};&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckSysIdsInScript,    grRecordCodeSanityAppInstall,rules, false);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckThrowingExceptions,grRecordCodeSanityAppInstall,rules, true);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckSysIdsInScript,    grRecordDevToolsAppInstall,  rules, false);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckThrowingExceptions,grRecordDevToolsAppInstall,  rules, true);&#13;
&#13;
	// A single check should not be executed if the record is in scope x_snc_codesanity&#13;
	var rules = {&#13;
		blacklist: [&#13;
			{&#13;
				scopes: ['x_snc_codesanity'],&#13;
				checks: ['CodeSanity - Sys IDs in scripts']&#13;
			}&#13;
		]&#13;
	};&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckSysIdsInScript,    grRecordCodeSanityAppInstall,rules, false);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckThrowingExceptions,grRecordCodeSanityAppInstall,rules, true);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckSysIdsInScript,    grRecordDevToolsAppInstall,  rules, true);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckThrowingExceptions,grRecordDevToolsAppInstall,  rules, true);&#13;
&#13;
	// A single check should not be executed if the record is in scope "CodeSanity"&#13;
	var rules = {&#13;
		blacklist: [&#13;
			{&#13;
				scopes: ['CodeSanity'],&#13;
				checks: ['CodeSanity - Sys IDs in scripts']&#13;
			}&#13;
		]&#13;
	};&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckSysIdsInScript,    grRecordCodeSanityAppInstall,rules, false);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckThrowingExceptions,grRecordCodeSanityAppInstall,rules, true);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckSysIdsInScript,    grRecordDevToolsAppInstall,  rules, true);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckThrowingExceptions,grRecordDevToolsAppInstall,  rules, true);	&#13;
	&#13;
	&#13;
	// A single check should only be executed if in scope x_snc_devtools&#13;
	var rules = {&#13;
		whitelist: [&#13;
			{&#13;
				scopes: ['x_snc_devtools'],&#13;
				checks: ['CodeSanity - Sys IDs in scripts']&#13;
			}&#13;
		]&#13;
	};&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckSysIdsInScript,    grRecordCodeSanityAppInstall,rules, false);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckThrowingExceptions,grRecordCodeSanityAppInstall,rules, true);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckSysIdsInScript,    grRecordDevToolsAppInstall,  rules, true);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckThrowingExceptions,grRecordDevToolsAppInstall,  rules, true);&#13;
&#13;
	&#13;
	// A single check should only be executed if in scope "DevTools"&#13;
	var rules = {&#13;
		whitelist: [&#13;
			{&#13;
				scopes: ['DevTools'],&#13;
				checks: ['CodeSanity - Sys IDs in scripts']&#13;
			}&#13;
		]&#13;
	};&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckSysIdsInScript,    grRecordCodeSanityAppInstall,rules, false);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckThrowingExceptions,grRecordCodeSanityAppInstall,rules, true);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckSysIdsInScript,    grRecordDevToolsAppInstall,  rules, true);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckThrowingExceptions,grRecordDevToolsAppInstall,  rules, true);&#13;
	&#13;
	&#13;
	&#13;
	// One check should only be executed if in scope x_snc_codesanity&#13;
	// Another check should NOT run if in scope x_snc_codesanity&#13;
	var rules = {&#13;
		blacklist: [&#13;
			{&#13;
				scopes: ['x_snc_codesanity'],&#13;
				checks: ['CodeSanity - Throwing exceptions']&#13;
			}&#13;
		],	&#13;
		whitelist: [&#13;
			{&#13;
				scopes: ['x_snc_devtools'],&#13;
				checks: ['CodeSanity - Sys IDs in scripts']&#13;
			}&#13;
		]&#13;
	};&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckSysIdsInScript,    grRecordCodeSanityAppInstall,rules, false);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckThrowingExceptions,grRecordCodeSanityAppInstall,rules, false);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckSysIdsInScript,    grRecordDevToolsAppInstall,  rules, true);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckThrowingExceptions,grRecordDevToolsAppInstall,  rules, true);&#13;
		&#13;
	&#13;
	// Multiple blacklist rules:&#13;
	// One check should NOT run  in scope x_snc_devtools&#13;
	// Another check should NOT run if in scope x_snc_codesanity&#13;
	var rules = {&#13;
		blacklist: [&#13;
			{&#13;
				scopes: ['x_snc_codesanity'],&#13;
				checks: ['CodeSanity - Throwing exceptions']&#13;
			},&#13;
			{&#13;
				scopes: ['x_snc_devtools'],&#13;
				checks: ['CodeSanity - Sys IDs in scripts']&#13;
			}&#13;
		]&#13;
	};&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckSysIdsInScript,    grRecordCodeSanityAppInstall,rules, true);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckThrowingExceptions,grRecordCodeSanityAppInstall,rules, false);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckSysIdsInScript,    grRecordDevToolsAppInstall,  rules, false);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckThrowingExceptions,grRecordDevToolsAppInstall,  rules, true);	&#13;
	&#13;
	&#13;
	// Multiple (seemingly) contradicting rules (whitelists ovveride blacklists)&#13;
	// One check is blacklisted for scope x_snc_codesanity&#13;
	// The same check is whitelisted for scope x_snc_codesanity&#13;
	var rules = {&#13;
		blacklist: [&#13;
			{&#13;
				scopes: ['x_snc_codesanity'],&#13;
				checks: ['CodeSanity - Throwing exceptions']&#13;
			}&#13;
		],	&#13;
		whitelist: [&#13;
			{&#13;
				scopes: ['x_snc_codesanity'],&#13;
				checks: ['CodeSanity - Throwing exceptions']&#13;
			}&#13;
		]&#13;
	};&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckSysIdsInScript,    grRecordCodeSanityAppInstall,rules, true);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckThrowingExceptions,grRecordCodeSanityAppInstall,rules, true);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckSysIdsInScript,    grRecordDevToolsAppInstall,  rules, true);&#13;
	TestCase_IsCheckApplicableToRecordByRules(grCheckThrowingExceptions,grRecordDevToolsAppInstall,  rules, false);		&#13;
	&#13;
	&#13;
	return test.GetResult();&#13;
	&#13;
})(outputs, steps, stepResult, assertEqual);</value>
        <variable display_value="Test script">989d9e235324220002c6435723dc3484</variable>
    </sys_variable_value>
</record_update>
