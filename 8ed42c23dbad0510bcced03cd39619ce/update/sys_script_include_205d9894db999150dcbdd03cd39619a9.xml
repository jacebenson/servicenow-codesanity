<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_codesanity.GetExecutionRulesForCheckByRules</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Returns the rules that are applicable to the given check based on the given execution rules.</description>
        <mobile_callable>false</mobile_callable>
        <name>GetExecutionRulesForCheckByRules</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function GetExecutionRulesForCheckByRules(grCheck,rules)
{
	var IsValidRecord = x_snc_devtools.IsValidRecord;
	var SetValue = x_snc_devtools.SetValue;
	var GetValue = x_snc_devtools.GetValue;
	var GetArrayValue = x_snc_devtools.GetArrayValue;
	var ArrayPushUnique = x_snc_devtools.ArrayPushUnique;
	var GetStringValue = x_snc_devtools.GetStringValue;
	var ArrayRemoveValue = x_snc_devtools.ArrayRemoveValue;
	var GetKeys = x_snc_devtools.GetKeys;
	var IsEqual = x_snc_devtools.IsEqual;
	var GetBoolValue = x_snc_devtools.GetBoolValue;
	var GetAppName = x_snc_devtools.GetAppName;
	
	if (IsValidRecord(grCheck) == false)
	{
		return {};
	}
	
	var rulesForCheck = {};
	
	
	// BLACKLIST - prevent specific checks from running
	
	
	var aBlacklistRules = GetArrayValue(GetValue(rules,'blacklist'));
	
	for (var nRule = 0; nRule < aBlacklistRules.length; nRule++)
	{
		var rule = aBlacklistRules[nRule];
		var aChecks = GetArrayValue(GetValue(rule,'checks'));
		
		var bAppliesToCheck = false;
		
		if (aChecks.length == 0) // no checks are specified in the rule: the rule applies to all checks
		{
			bAppliesToCheck = true;
		}
		else
		{
			for (var nCheck = 0; nCheck < aChecks.length; nCheck++)
			{
				var strCheck = aChecks[nCheck];
				if (strCheck == grCheck.getValue('name') || strCheck == GetStringValue(grCheck.sys_id))
				{
					bAppliesToCheck = true;
				}
			}
		}
		
		if (bAppliesToCheck == true)
		{
			var bAll = GetBoolValue(GetValue(rule,'all'));
			
			if (bAll == true)
			{
				SetValue(true,rulesForCheck,'blacklist','all');
			}
			else
			{
				var aScopes = GetArrayValue(GetValue(rule,'scopes'));
				aScopes = GetAppIdentifiers(aScopes);

				var aScopesInRule = GetArrayValue(GetValue(rulesForCheck,'blacklist','scopes'));				
				aScopesInRule = GetAppIdentifiers(aScopesInRule);

				for (var nScope = 0; nScope < aScopes.length; nScope++)
				{
					aScopesInRule = ArrayPushUnique(aScopesInRule,aScopes[nScope]);
				}
				SetValue(aScopesInRule,rulesForCheck,'blacklist','scopes');

			}
			
			
		}
	
	}
	
	

	// WHITELIST - only run specific checks if conditions match
	
	var aWhitelistRules = GetArrayValue(GetValue(rules,'whitelist'));
	
	for (var nRule = 0; nRule < aWhitelistRules.length; nRule++)
	{
		var rule = aWhitelistRules[nRule];
		var aChecks = GetArrayValue(GetValue(rule,'checks'));
		
		var bAppliesToCheck = false;
		
		for (var nCheck = 0; nCheck < aChecks.length; nCheck++)
		{
			var strCheck = aChecks[nCheck];
			if (strCheck == grCheck.getValue('name') || strCheck == GetStringValue(grCheck.sys_id))
			{
				bAppliesToCheck = true;
			}
		}
		
		if (bAppliesToCheck == true)
		{
			var aScopes = GetArrayValue(GetValue(rule,'scopes'));
			aScopes = GetAppIdentifiers(aScopes);
			
			if (aScopes.length == 0)
			{
				var aScopesInRule = GetValue(rulesForCheck,'blacklist','scopes');
				if (aScopesInRule == null)
				{
					SetValue([],rulesForCheck,'whitelist','scopes');
				}
			}
			else
			{
				var aScopesInRule = GetArrayValue(GetValue(rulesForCheck,'whitelist','scopes'));
				aScopesInRule = GetAppIdentifiers(aScopesInRule);
				for (var nScope = 0; nScope < aScopes.length; nScope++)
				{
					aScopesInRule = ArrayPushUnique(aScopesInRule,aScopes[nScope]);
				}
				SetValue(aScopesInRule,rulesForCheck,'whitelist','scopes');
			}			
		}
	}
	
	// Cleanup blacklist based on contradicting whitelist
	var aBlacklistScopes = GetValue(rulesForCheck,'blacklist','scopes');
	aBlacklistScopes = GetAppIdentifiers(aBlacklistScopes);
	
	var aWhitelistScopes = GetValue(rulesForCheck,'whitelist','scopes');
	aWhitelistScopes = GetAppIdentifiers(aWhitelistScopes);
	
	if (aBlacklistScopes != null && aWhitelistScopes != null)
	{
		if (aBlacklistScopes.length > 0 && aWhitelistScopes.length > 0)
		{
			for (var nWhitelistScope = 0; nWhitelistScope < aWhitelistScopes.length; nWhitelistScope++)
			{
				aBlacklistScopes = ArrayRemoveValue(aBlacklistScopes,aWhitelistScopes[nWhitelistScope]);
				aBlacklistScopes = ArrayRemoveValue(aBlacklistScopes,GetAppName(aWhitelistScopes[nWhitelistScope]));
			}
			if (aBlacklistScopes.length == 0)
			{
				delete rulesForCheck.blacklist.scopes;
				if (IsEqual(GetKeys(rulesForCheck.blacklist),[]) == true)
				{
					delete rulesForCheck.blacklist;
				}
				//SetValue(aScopesInRule,rulesForCheck,'blacklist',null);	
			}
			else
			{
				SetValue(aBlacklistScopes,rulesForCheck,'blacklist','scopes');	
			}
		}
	}
	
	return rulesForCheck;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-08-09 16:00:44</sys_created_on>
        <sys_id>205d9894db999150dcbdd03cd39619a9</sys_id>
        <sys_mod_count>22</sys_mod_count>
        <sys_name>GetExecutionRulesForCheckByRules</sys_name>
        <sys_package display_value="CodeSanity WORK IN PROGRESS" source="x_snc_codesanity">8ed42c23dbad0510bcced03cd39619ce</sys_package>
        <sys_policy/>
        <sys_scope display_value="CodeSanity WORK IN PROGRESS">8ed42c23dbad0510bcced03cd39619ce</sys_scope>
        <sys_update_name>sys_script_include_205d9894db999150dcbdd03cd39619a9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-08-30 13:59:02</sys_updated_on>
    </sys_script_include>
</record_update>
