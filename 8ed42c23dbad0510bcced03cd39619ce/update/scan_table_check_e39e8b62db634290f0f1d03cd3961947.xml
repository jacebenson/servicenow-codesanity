<?xml version="1.0" encoding="UTF-8"?><record_update table="scan_table_check">
    <scan_table_check action="INSERT_OR_UPDATE">
        <active>true</active>
        <advanced>true</advanced>
        <category>code_sanity</category>
        <conditions/>
        <description>Persona roles may contain roles defined in other applications and OOTB roles – which implies a dependency from the application that contains the persona role to those applications which define other, more specific roles.&#13;
&#13;
As a result, the best place to define the persona roles is the Platform application (as described in chapter “Application Architecture and Dependency Management”). The Platform application is the root of the dependency tree – nothing depends on it, but it depends on every other application. This makes the Platform application the natural place for persona role definitions. &#13;
&#13;
For more details on the concept of persona roles, refer to chapter "Personas and roles" in the referenced whitepaper.</description>
        <documentation_url>https://www.wildgrube.com/download/A%20mature%20Development%20and%20Deployment%20Process.pdf</documentation_url>
        <finding_type>scan_finding</finding_type>
        <name>CodeSanity - Persona role dependencies</name>
        <priority>1</priority>
        <resolution_details>The resolution of the finding depends on the root cause:&#13;
1. A persona role has been defined in an application to which other applications depend on. In that case such persona roles should be removed and re-created in the "platform application" - i.e. an application that forms the root of the dependency tree and that has no upstream dependencies.&#13;
2. The application specifies a dependency to the "platform application" (in which persona roles are legitimatly defined). In that case the dependency to the "platform application" must be resolved.&#13;
In both cases, refactoring is required. The situation is likely the result of inconsistent architecture design decisions or developers not being aware of the design in the first place.</resolution_details>
        <run_condition/>
        <score_max>100</score_max>
        <score_min>0</score_min>
        <score_scale>1</score_scale>
        <script><![CDATA[(function (engine) {

	if (x_snc_codesanity.IsCheckApplicableToRecord())
	{
		if (current.package_class != 'sys_app')
		{
			return;
		}

		var grApp = x_snc_devtools.GetAppRecord(current.dependency);
		if (grApp == false)
		{
			return;
		}

		var grRoles = new GlideRecord('sys_user_role');
		grRoles.addQuery('sys_scope','=',grApp.sys_id);
		grRoles.query();
		while (grRoles.next())
		{
			var bPersonaRole = x_snc_devtools.IsPersonaRole(grRoles);
			if (bPersonaRole == true)
			{
				engine.finding.increment();	
			}
		}
	}

})(engine);]]></script>
        <short_description>An application must not depend on an application that contains persona roles</short_description>
        <sys_class_name>scan_table_check</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-07-25 13:45:42</sys_created_on>
        <sys_id>e39e8b62db634290f0f1d03cd3961947</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>CodeSanity - Persona role dependencies</sys_name>
        <sys_package display_value="CodeSanity WORK IN PROGRESS" source="x_snc_codesanity">8ed42c23dbad0510bcced03cd39619ce</sys_package>
        <sys_policy/>
        <sys_scope display_value="CodeSanity WORK IN PROGRESS">8ed42c23dbad0510bcced03cd39619ce</sys_scope>
        <sys_update_name>scan_table_check_e39e8b62db634290f0f1d03cd3961947</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-07-29 15:00:01</sys_updated_on>
        <table>x_snc_devtools_dependency</table>
        <use_manifest>false</use_manifest>
    </scan_table_check>
    <sys_translated_text action="delete_multiple" query="documentkey=e39e8b62db634290f0f1d03cd3961947"/>
</record_update>
